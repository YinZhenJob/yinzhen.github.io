{"meta":{"title":"隐贞Blog","subtitle":null,"description":"南方二月明媚天~如果心情是有颜色的，那么一定是春草发芽的嫩绿色。关注iOS领域，正打算往游戏、动漫方向发展。","author":"隐贞","url":"http://yinzhen.tech"},"pages":[{"title":"如果可以酿成一首诗","date":"2017-03-15T03:05:43.000Z","updated":"2017-03-15T08:26:51.000Z","comments":true,"path":"onePoem/index.html","permalink":"http://yinzhen.tech/onePoem/index.html","excerpt":"","text":""},{"title":"coding","date":"2017-03-15T08:56:36.000Z","updated":"2017-03-15T08:56:59.000Z","comments":true,"path":"coding/index.html","permalink":"http://yinzhen.tech/coding/index.html","excerpt":"","text":""},{"title":"风雨日记","date":"2017-03-15T03:04:48.000Z","updated":"2017-03-15T08:26:52.000Z","comments":true,"path":"dailyLife/index.html","permalink":"http://yinzhen.tech/dailyLife/index.html","excerpt":"","text":""},{"title":"tags","date":"2017-03-15T07:44:42.000Z","updated":"2017-03-15T07:45:21.000Z","comments":true,"path":"tags/index.html","permalink":"http://yinzhen.tech/tags/index.html","excerpt":"","text":""}],"posts":[{"title":"iOS 正确嵌套 WKWebView 的 TableView 方式之一","slug":"iOS-中的那些富文本","date":"2018-08-07T06:53:19.000Z","updated":"2018-08-10T08:56:08.591Z","comments":true,"path":"2018/08/07/iOS-中的那些富文本/","link":"","permalink":"http://yinzhen.tech/2018/08/07/iOS-中的那些富文本/","excerpt":"","text":"此文读者：iOS 开发者 此文深度：粗浅 此文目的：解决 TableView 嵌套 WKWebView 高度问题 环境配置：Xcode10.0 &amp; macOS10.13.6 &amp; 弱网环境 前言项目做多了，难免会有些需要和富文本打交道地方。展示一个富文本可以使用多种技术方案，不过多个方案之间各有自己的特性，这就需要开发人员进行技术的筛选。因本司编辑员常用网页样式，故而一些长篇的图文当中就需要 WebView 作为容器进行展示了。 如果展示是单纯的H5介绍页，使用一个纯 WebView 进行展示是非常合适的。不过当展示界面混合了 Native 控件，事情就变得不太容易起来。通常这样的页面同新闻的详情页一样，一个 TableView 中嵌套了包含 WebView 的 Cell 或 TableHeaderView，且要求整个 TableView 滑动起来自然 &amp; 连贯。 连贯，即要求 TableView 整体内容不能有截断，所以 TableView 中的各个部分要求自适应其高度； 自然，即要求 TableView 在滑动的时候内容随着操作手势明确地上下滚动 不能出现掉帧、卡顿现象，所以 耗时操作 &amp; 响应事件 就需要格外关注； 轻巧，即要求 实现方式较为简便，便于其他开发者的维护； 准备我们需要创建一个类似新闻详情页的Demo： 主页头部展示 HTML ，宽度与屏幕宽度一致，高度随内容需要完全展开； 尾部是推荐文章的单元，点击该单元可以切换头部的内容，就像下图一样。 其详情页的层级如下：（已上传到GitHub，为了便于方案演变，本人随开发做了 commit 记录，读者可根据个人需求在各个 commit 版本中切换） TableView WebCell：用于 HTML 展示； SectionCell：用于 模块标题 展示； ArticleCell：用于 推荐单元 展示； ToolView 手势点击事件 基础版： 类型：纯文本 参考：《人间失格》单元 详情页展示的是纯文本，我们仅需在 WebViw 代理webView(_, didFinish)方法通过执行document.body.scrollHeight JS代码注入获取文档高度，再将高度反馈给 TableView 进行刷新即可，该高度即为文档渲染的正确高度。 1234567func webView(_ webView: WKWebView, didFinish navigation: WKNavigation!) &#123; // 获取 HTML 文档高度 webView.evaluateJavaScript(&quot;document.body.scrollHeight&quot;) &#123; (heightValue, error) in guard let height = heightValue as? CGFloat else &#123; return &#125; self.heightAction?(height) &#125;&#125; 请参考Demo中「基础版」commit 节点。 观察者模式： 类型：少量图文混排 参考：《迟暮》单元 当详情页展示的是少量的图文混排后，因为图片的加载是一件耗时操作的事情，我们通常将其设定为懒加载模式，当页面内的资源加载完毕后我们再获取其高度，才为正确的文档高度。所以在webView(_, didFinish)里获取其高度也不是准确的，该代理方法是 WebView 载入 HTML 文档完成后的回调，并不等于该 HTML 完全渲染完后的回调。 contentSize 方法 根据以上判断，我们需要捕捉 HTML 渲染变化的信号。而 HTML 渲染动作直接影响到的是 WebView scrollView.contentSize 属性，每当该值发生变化代表的是当前 HTML文档 已渲染到的位置。 我们可以使用观察者模式来监听这个属性的变化，当该属性发生变化时我们需要及时调整容器的高度并将其反映给 TableView 进行刷新。 1234567891011121314151617181920212223fileprivate lazy var webView: WKWebView = &#123; let config = WKWebViewConfiguration() let web = WKWebView(frame: CGRect(x: 0, y: 0, width: contentView.bounds.width, height: 100), configuration: config) web.navigationDelegate = self web.scrollView.isScrollEnabled = false web.translatesAutoresizingMaskIntoConstraints = false // 添加观察者监听 scrollView.contentSize 属性 web.addObserver(self, forKeyPath: &quot;scrollView.contentSize&quot;, options: .new, context: nil) return web&#125;() /// 监听 scrollView.contentSize 属性override func observeValue(forKeyPath keyPath: String?, of object: Any?, change: [NSKeyValueChangeKey : Any]?, context: UnsafeMutableRawPointer?) &#123; if keyPath == &quot;scrollView.contentSize&quot;, let newSize = change?[.newKey] as? CGSize &#123; print(&quot;new size: \\(newSize)&quot;) self.heightAction?(newSize.height) &#125;&#125;deinit &#123; webView.stopLoading() webView.removeObserver(self, forKeyPath: &quot;scrollView.contentSize&quot;) &#125; loading 方法 同 contentSize 一样，我们也可以使用更高效的 loading 来进行监控，该属性用于表达 WebView 的加载状态， Apple 文档中对 isLoading 属性的描述如下： A Boolean value indicating whether the view is currently loading content. @discussion @link WKWebView @/link is key-value observing (KVO) compliant for this property. 修改后的代码，如下： 12345678910111213141516171819202122232425262728293031fileprivate lazy var webView: WKWebView = &#123; let config = WKWebViewConfiguration() let web = WKWebView(frame: CGRect(x: 0, y: 0, width: contentView.bounds.width, height: 100), configuration: config) web.navigationDelegate = self web.scrollView.isScrollEnabled = false web.translatesAutoresizingMaskIntoConstraints = false // 监听 webView 加载的动作 web.addObserver(self, forKeyPath: &quot;loading&quot;, options: .new, context: nil) return web &#125;() /// 监听 scrollView.contentSize &amp; loadingoverride func observeValue(forKeyPath keyPath: String?, of object: Any?, change: [NSKeyValueChangeKey : Any]?, context: UnsafeMutableRawPointer?) &#123; if keyPath == &quot;loading&quot;&#123; webView.evaluateJavaScript(&quot;document.body.scrollHeight&quot;) &#123; (heightValue, error) in guard let height = heightValue as? CGFloat else &#123; return &#125; print(&quot;Web loading Height: \\(height)&quot;) self.heightAction?(height) &#125; &#125; &#125; deinit &#123; webView.stopLoading() webView.removeObserver(self, forKeyPath: &quot;loading&quot;) &#125; 通过打印这两个观察者属性的调用动作，可以发现 contentSize 比 loading 调用的次数多，且在滚动 TableView 的时候 contentSize 是随即更新无论是否真有变化，而 loading 自加载完成后不再调用，两者计算的高度值一样。 如果使用观察者模式的话，建议选用 loading 模式： 其一 监听加载的动作更符合渲染状态发生这一事实； 其二 如果被认定为已加载完成 contentSize 就不会再变，无需持续观察。 虽然网络稍好的时候用以上方法均可以实现获取文档的正确高度，但一旦网络极差的情况下上面的方式都失效了。 请参考Demo中「观察者模式」commit 节点。 * JS 监听：记得上周五下班回家在地铁上开开心心等待第二天的 ChinaJoy，拿起小手机看看资讯消息，然后一条老板的微信消息@me，老板给我截了图~某详情页展示不全。虽然对这个问题熟悉得不能再熟悉也清楚要做什么，但还是为之一怔，因为和老板交流的不多（有时候他看着我，但目光已经透过了我到达后面的同事），为了不打破被老板忽略的角落形象，决定好好想想策略。 类型：大量图文混排 参考：《它们一边鄙视，一边用自己的方式照顾我们》单元 经过了之前的技术探索，觉得从 WebView 中找到监察 HTML 页面渲染完成的状态并不可靠，如果 HTML能够主动发送消息给我就好了。 按照这种想法，搜索了 「HTML 加载完成事件、HTML 图片懒加载完成事件……」，最终查到，在 HTML DOM 中 Event 有个函数 onload 是用于一张页面或一幅图像完成加载时所执行的，我们需要监听所有的 img标签 或 body标签，然后在这个方法里发个消息给 WebKit 然后进行拦截即可。 接下来我们要做两件事： 在 WebView 里注册一个方法，用以接收 HTML DOM 的事件； 在 HTML 里补充 JS 脚本，用以发送消息给 WebView ； 1. 在 WebView 里注册一个方法 配置 WKWebViewConfiguration ，为其注册一个 ScriptMessageHandler ； 实现 WKScriptMessageHandler 代理方法，拦截 你所注册的 ScriptMessageHandler； 123456789101112131415161718fileprivate lazy var webView: WKWebView = &#123; let config = WKWebViewConfiguration() config.preferences.javaScriptEnabled = true // 在此注册 JS 发送对象的函数名 config.userContentController.add(self, name: &quot;imagLoaded&quot;) let web = WKWebView(frame: CGRect(x: 0, y: 0, width: contentView.bounds.width, height: 100), configuration: config) web.navigationDelegate = self web.scrollView.isScrollEnabled = false web.translatesAutoresizingMaskIntoConstraints = false return web&#125;()func userContentController(_ userContentController: WKUserContentController, didReceive message: WKScriptMessage) &#123; if message.name == &quot;imagLoaded&quot;, let height = message.body as? CGFloat &#123; heightAction?(height) &#125;&#125; 2. 添加以下 JS 代码在 \\&lt;/ body&gt; 标签之后 使用 document.getElementsByTagName(&#39;img&#39;) 会获取 DOM 目录下所有的 img 标签； 使用 window.webkit.messageHandlers.&lt;你所注册的方法名&gt;.postMessage(&#39;数据消息&#39;) 给 webkit 发送消息； 1234567891011&lt;script type=&quot;text/javascript&quot;&gt; let imgArr = document.getElementsByTagName(&apos;img&apos;); for (var i = 0; i &lt;= imgArr.length - 1; i++) &#123; (imgArr[i]).onload = function() &#123; // 加载完成后给 webkit 发送通知 let height = document.body.scrollHeight; window.webkit.messageHandlers.imagLoaded.postMessage(height); &#125; &#125; &lt;/script&gt; 本文仅作为实际工程的应用，不涉及任何知识体系，想了解更多，请查看 WebKit 的开源代码 ╮(╯_╰)╭。","categories":[{"name":"技术栈","slug":"技术栈","permalink":"http://yinzhen.tech/categories/技术栈/"}],"tags":[{"name":"Swift","slug":"Swift","permalink":"http://yinzhen.tech/tags/Swift/"},{"name":"iOS","slug":"iOS","permalink":"http://yinzhen.tech/tags/iOS/"},{"name":"WebView","slug":"WebView","permalink":"http://yinzhen.tech/tags/WebView/"},{"name":"JS","slug":"JS","permalink":"http://yinzhen.tech/tags/JS/"}]},{"title":"iOS制作依赖Cocoapods且OC与Swift混编的framework","slug":"iOS制作依赖Cocoapods依赖-OC与Swift混编的framework","date":"2017-10-06T04:46:26.000Z","updated":"2017-10-17T03:32:05.081Z","comments":true,"path":"2017/10/06/iOS制作依赖Cocoapods依赖-OC与Swift混编的framework/","link":"","permalink":"http://yinzhen.tech/2017/10/06/iOS制作依赖Cocoapods依赖-OC与Swift混编的framework/","excerpt":"","text":"缘由刚进公司，翻看以前的工程项目，项目没有按照一定的组织计划和标准进行构建。并且，直接在项目上进行重构会有很大的阻力和风险。领导层也知道相关问题的存在，如果项目还是以现在的方式继续进行代码堆叠，势必将来会更加难以接手和维护，所以重新进行两个工程项目的重写得到支持。 风险虽然已经确定对两个项目进行重写，但是业务方面也停下来是挺危险的一件事情，毕竟我们是因为架构的优化而重新写了一遍。我原计划的是，自己先编写基础公共的模块，其他两位开发人员继续业务代码上的开发。等到我这边工作完成的时候，他们可以很快切入进来，并且也不耽误现有的需求计划。不过鉴于领导层的鼎力支持，好吧~项目的优化成为了当前工作的重中之重，然后自己作为实践人，肩上也少不了压力。 思路因为两个项目只是同一款应用做 iPhone 和 iPad 版的区分，业务大体上相同。所以萌生了制作基础公共库的想法。然后两个版本分别依赖这个基础库，就可以免了相关模块的重复开发和维护。又鉴于该库还依赖于一些三方的支持，所以在此基础上添加了Cocoapods的依赖包管理。当时设计的方案是：framework、 一样作为独立的project添加到 workspace 中去，不过由于多个工程之间的版本管理方案没有达到合理的程度，所以作罢。 合理的版本管理方案： 要求：每个工程之间应该是独立的； 问题： 通常我们是在每个工程目录的文件夹下为创建 Git 管理，正常的逻辑是一个workspace包含 framework、iPhone、iPad、cocoapods，然后每个 project 都包含一个git管理，所以我们应不应该为了workspace这个总目录来创建一个新的git仓库？亦或者将workspace这个工作台放在其中的某个project中？ 如果创建一个版本控制去单独维护 workspace 的话，那么此刻这个git仓库将会包含所有 project 项目上的改动，将会重复。 如果只配置一个总git仓库，那么其它 project 不免失去了独立性的意义。 也因为创建不同 project 没能协调好 cocoapods 引入导致的一些问题，所以采取了另外一种方案，那就是创建多个target而不是project，这样保持了一个project意义的完整性。 方法公司切换到 swift 的开发洪流当中，首先我们新创一个 swift 语言的 project：因为是制作 framework 为目的，所以选择iOS平台下的Cocoa Touch Framework 框架,然后依次填写工程的相关信息，最后生成该project。 创建新的 Target —— iPhone 和 iPad，并为其添加本地创建的依赖库支持； 最后为工程配置cocoapods：终端进入project目录，键入pod init来生成 podfile 文件，打开 podfile 文件输入自己需要的依赖库，因为标题是OC与Swift 混编，所以也引入两个不同的开发语言，看出现什么意外的效果； 配置好 Cocoapods 之后,我们来为自己创建的 frame 添加相关的代码吧。首先打开工程的 workspace，在 自己创建的 framework 中创建 OC 类，然后编写相应的实例方法，并在工程的头文件中导入需要暴露给其它 targetd的OC头文件（swift文件可以忽略这步），最后对该framework进行编译，在你需要的 target 中导入 framework 即可使用。 很多坑也许你以为跟着这些步骤就好了，其实还有不少坑。 比如你在 framework 中写OC与swift混编的东西，就得多注意这两者语言的特性了。 OC 调用 swift 的属性：你得将 swift 中的属性用 @objc 声明为对象，并且赋予 open 权限； 关于 swift4.0 的 json 转换对象特性： Codable协议，如果你是打算在 OC 中直接使用 swift 的 Json 编解码特性的话，找到了方法一定要告诉我。我查了下关于这部分的内容，OC语言并没有这方面的文档资料，所以它们之间并不互相直接支持，你得编写个 swift 模型的编解码包装，然后暴露给 OC 使用； 很多 swift 过于强大的新特性，你不能在 OC 中使用 enum、struct 中的方法、协议，不能使用元组 等等。 初次编写技术文，如果写的不对就是误人子弟了。所以有遇到问题、纠正或建议的希望能和我联系，不胜感激。","categories":[{"name":"技术栈","slug":"技术栈","permalink":"http://yinzhen.tech/categories/技术栈/"}],"tags":[{"name":"文档","slug":"文档","permalink":"http://yinzhen.tech/tags/文档/"},{"name":"Swift","slug":"Swift","permalink":"http://yinzhen.tech/tags/Swift/"}]},{"title":"ReactiveSwift的中文翻译","slug":"ReactiveSwift的中文翻译","date":"2017-03-15T09:04:08.000Z","updated":"2017-03-15T13:21:27.000Z","comments":true,"path":"2017/03/15/ReactiveSwift的中文翻译/","link":"","permalink":"http://yinzhen.tech/2017/03/15/ReactiveSwift的中文翻译/","excerpt":"","text":"项目开源从学习编程以来，很羡慕为开源社区做工作的那些科技者。很多时候自己也想拥有开源项目，不过在编程遇到的问题很多都有完善的解决方案了，所以也不想在旧有的问题上再插上一脚~ 这次因为想要深入学习，所以看了关于『响应式编程』的概念，然后对ReactiveSwift的框架产生了兴趣。虽然英文文档能看懂，不过本着如果有相关的详细中文介绍那就更好了。所以搜索了下中文方面的相关资料，这方面还是挺少的~所以趁此机会建了个开源项目，邀请好友一同来完成。不过，翻译这事对于技术类的要求也不低，很多专业术语是需要对应的，还有一些奇怪的用词。 例如：stream of value over time , 这句话断的位置点不一样很奇怪的效果就会出现，概意是随时间而变化的数据流 ，但是这么这样翻译就很变扭了，查找专业术语也没匹配上这句话的含义，所以有些词也得自己造了~于是想翻译成 泛时数据流，意思是数据在时间里流动。还是希望能够有同学能够帮忙校对下，毕竟这类文章真的需要正确。 在此感谢小伙伴小侯帮忙负责Signal模块的翻译工作。小侯是一名还在上学的研究生，平常对技术也是十分热心，对周围人也真诚、关心。当我寻求周围朋友的帮助时，他毫不犹豫地奉献给了这个项目。 当前我负责序言模块，尽量在每句话上都锱铢必较了。受于知识和能力的限制还有不少语不达意的地方，看到的朋友就告知下，在此感激不敬。 联系方式： QQ: 493246157 Email: zohar_zeng@163.com Github: https://github.com/YinZhenJob/ReactiveSwift_Chinese_Guide","categories":[{"name":"技术栈","slug":"技术栈","permalink":"http://yinzhen.tech/categories/技术栈/"}],"tags":[{"name":"文档","slug":"文档","permalink":"http://yinzhen.tech/tags/文档/"},{"name":"Swift","slug":"Swift","permalink":"http://yinzhen.tech/tags/Swift/"}]},{"title":"Blog诞生日","slug":"Blog诞生日","date":"2017-02-17T05:10:43.000Z","updated":"2017-03-14T06:54:58.000Z","comments":true,"path":"2017/02/17/Blog诞生日/","link":"","permalink":"http://yinzhen.tech/2017/02/17/Blog诞生日/","excerpt":"","text":"缘起 自从小时候接触互联网，就一直希望拥有自己的个人主站。然而时间过去了那么久，曾经的愿望也忘得一干二净，忽然的前几天又萌生出建站的念头。于是乎，搜索教程、购买域名、搭建网站、部署服务，虽然作为新手有很多地方磕磕碰碰，但这也是Geek的乐趣之一吧~ 大学毕业之前一直都有写些文学相关的东西、心灵的笔录，在别人言语之间多以文艺青年形象自居。然而毕业之后，话语越来越少，逐渐沉默转而变成一个IT编程奋斗男。工作的压力是往常北漂人民所能感受到的，在要求自立自强自学的同时似乎每日的时间都被挤弄得一滴不剩。趁着在离职公司的这段时间好好自我省视，也把相关的技能补充加强，规划将来的方向。 兴趣 兴趣爱好之多，以至于我好像没有不感兴趣的。现在能做到保持有的兴趣主要有：科技、手工、烹饪、旅游、动漫、音乐、歌剧、文学、RPG，我几乎都想要在以上领域有所交叉接触。 不过现在方向是往科技偏移，毕竟科技能够明显推动对社会的进步。虽然还不是领跑科技界的人，不过相关知识和经验的积累，对于我这种处于平凡的生活环境中的人是必不可少的过程。","categories":[{"name":"风雨日记","slug":"风雨日记","permalink":"http://yinzhen.tech/categories/风雨日记/"}],"tags":[{"name":"毕业","slug":"毕业","permalink":"http://yinzhen.tech/tags/毕业/"},{"name":"人生规划","slug":"人生规划","permalink":"http://yinzhen.tech/tags/人生规划/"},{"name":"兴趣","slug":"兴趣","permalink":"http://yinzhen.tech/tags/兴趣/"}]},{"title":"都毕业了 秘密还是秘密","slug":"都毕业了-秘密还是秘密","date":"2015-06-27T18:46:58.000Z","updated":"2017-03-15T13:28:03.000Z","comments":true,"path":"2015/06/28/都毕业了-秘密还是秘密/","link":"","permalink":"http://yinzhen.tech/2015/06/28/都毕业了-秘密还是秘密/","excerpt":"","text":"​ 今晚夜是晴空，几日前的雾气散去。直至此刻，参加了许许多多的聚会，却始终没能和每一个见过的朋友说声“再见”。 小部员发来张信哲的歌曲《信仰》，原先没心没肺的我现在也五味杂陈，而且夜晚的夜总是显得那么孤寂。说感谢的话俗可泛滥，而不言真是我浑身上下的歉意、遗憾和浑蛋。很多心底事累堆放在了珍珠贝里，用自己的胆汁、泪水包裹着，虽然日复一日逐渐圆润，没有当初刺痛自己的那种感觉，却将包裹的事物越积越深，越养越大，一个房间只留下一个小小的地方给自己，像秘密那样，挥不去，打不开。 喜欢映衬不到眼瞳里存在的影子，等待没有张开怀里微醺的温度，靠近却又做出相反的步调，秘密了，还是秘密。 毕业，知不知足：把记录烦恼的课本埋葬；清空躺了多年的被窝；捐赠淘来的折叠桌；捐赠磕碰的滑板；捐赠捡来的自行车；藏好送别你的礼物；剪去刚及肩膀的小马扎；把一柜子的衣物折叠，寄回遥远的家； 要出发了， 那些我告别和来不及告别的人； 谢谢二楼西七号的炸酱面，三楼西的臊子面、朝鲜冷面和一号窗口的菜食，百来人的澡堂；再见，我喜欢的你。","categories":[],"tags":[{"name":"青春","slug":"青春","permalink":"http://yinzhen.tech/tags/青春/"}]},{"title":"三月的霾","slug":"三月的霾","date":"2015-03-29T12:30:33.000Z","updated":"2017-03-15T13:30:51.000Z","comments":true,"path":"2015/03/29/三月的霾/","link":"","permalink":"http://yinzhen.tech/2015/03/29/三月的霾/","excerpt":"","text":"三月底的天，灰霾霾的。远方翻滚的黄尘在天空之际往下弥漫，午后的暖日成了片状的白光。歇斯底里地来到拥挤的教室格局，三月的霾是一个粗暴的强盗。 昨日去参加“开源大会”，在大会上无意一瞥发现许久不见的“猴子”和“胖子”，在讶异和欣喜之时走了过去，不得不说一些因缘是解不开的结。当然我不知道是什么样的巧合会在另外一个城市遇到相熟的故人，走在城市的任何地方都不会遇到一样的你们。大学的日子对我来说已经是半剩不剩，常常有人感慨大学的时光是多麽美好，让人留恋不舍。也许我的大学活得不够拼劲，青春的张力没有把我带向理想的高堂，梦想不过成了我拿来糊弄别人感觉的“单纯”。 每次一些事情失败之后，总想离开这已经熟悉再不能熟悉的环境，总以为离开重新开始才是最好的办法。烂摊子什么的自己不想要了，但是命运像根缚着身体的操线，我离不开控制我活动的这根线。于是，那些人和事都因为时间而合适地发生了。沉浸在自己的世界太久，是自己给自己造的牢笼。我从小就一直在寻找或制造有别与他人的奇特特点，总觉得独一无二的自己是世界上最珍贵的，也许由于这种想法造成了以后异样的行动和思维。当初熟不知道，一个独特的人在一个平衡的世界是那么格格不入，自己所想的世界只能自己一步步去造，许诺的理想越美好，要挣扎的世界也就越血淋漓。也不知是什么在召唤，最近在熟睡的时候总能感受着一些生命的流逝，感受万物的命运，感受别人从活到死的瞬息。人最无力的是千钧一发时抓不准时机，在力挽狂澜时手无缚鸡之力。受够了……三月的霾，是给自己的毒，最爱的是将自己沉醉在无奈的命运。 从天白到天黑，路程遥遥，我不能阻止白天变黑夜，我更不能阻止自己在凌晨两点前就睡着 ，而只能早点起床，在要过去的一天里汲取能够让自己能够千钧一发、力挽狂澜时该有的本领。所以一个人走着，一个人吃饭，一个人在练习，不要问我为什么又是一个人，因为一个人最容易做到自己想做的事。我除了幻想，也该活得像要奋斗的人一样。霾留给其他人的毒","categories":[{"name":"风雨日记","slug":"风雨日记","permalink":"http://yinzhen.tech/categories/风雨日记/"}],"tags":[{"name":"霾","slug":"霾","permalink":"http://yinzhen.tech/tags/霾/"},{"name":"迷茫","slug":"迷茫","permalink":"http://yinzhen.tech/tags/迷茫/"}]},{"title":"与考试无关的夜晚","slug":"与考试无关的夜晚","date":"2014-01-14T16:21:55.000Z","updated":"2017-03-14T07:16:37.000Z","comments":true,"path":"2014/01/15/与考试无关的夜晚/","link":"","permalink":"http://yinzhen.tech/2014/01/15/与考试无关的夜晚/","excerpt":"","text":"离别的风 憔悴的夜色光秃秃的树干 时光捻过的颜容走过的石板 没有留下的脚印 路过的水果铺 逐渐散去的灯光遇不上的人 奇怪的人上链的门口 没有人的值班室悄悄地 翻过篱笆 感冒的暖气 坚硬的绿花床落下的玻璃杯 破碎的祝福一些些的情绪 一些些的道理讲给自己听","categories":[{"name":"如果可以酿成一首诗","slug":"如果可以酿成一首诗","permalink":"http://yinzhen.tech/categories/如果可以酿成一首诗/"}],"tags":[{"name":"恋","slug":"恋","permalink":"http://yinzhen.tech/tags/恋/"}]},{"title":"风语消消黑人墓","slug":"风语消消黑人墓","date":"2013-06-10T09:27:42.000Z","updated":"2017-03-14T07:20:11.000Z","comments":true,"path":"2013/06/10/风语消消黑人墓/","link":"","permalink":"http://yinzhen.tech/2013/06/10/风语消消黑人墓/","excerpt":"","text":"一些音乐静静的像下着小雨那样小到撑伞也不是，不撑也不是就这样微妙着一阵阵阴云下的凉风今天是那么惬意地吹着音乐像小雨，在这风动的天气一直下着记录是种回忆，却来不及保存，消失不见 也许，忘怀 删掉如若是彻底的是否已安然再见如果是种可能，是否打个照面而过歌颂也已停止，心已坦荡，一种相识，不过半年美好的不美好忘掉忘不掉的走去没走过的 谢谢你 ，两季没闲过的日月","categories":[{"name":"如果可以酿成一首诗","slug":"如果可以酿成一首诗","permalink":"http://yinzhen.tech/categories/如果可以酿成一首诗/"}],"tags":[{"name":"寂寞","slug":"寂寞","permalink":"http://yinzhen.tech/tags/寂寞/"}]},{"title":"今年的大四一条街","slug":"今年的大四一条街","date":"2013-06-03T14:09:10.000Z","updated":"2017-03-15T13:35:21.000Z","comments":true,"path":"2013/06/03/今年的大四一条街/","link":"","permalink":"http://yinzhen.tech/2013/06/03/今年的大四一条街/","excerpt":"","text":"学校大四一条街卖着些书，生活品，和配件类物品。也许是有点商人的资质，就打算去瞎逛着，砍砍价，当做是种乐趣。 于是~ 昨天差点忽悠成功一哥们买个滑板陪我玩，今天我再次带上另外一人，打算买点专业书籍（学校订的书贵）类的，首家一帅哥，起价100元，我唠叨了大半天80底盘，我本着60元处理，帅哥委屈状 ：“你怎么不尊重一下市场规律，现在才摆摊没几天，你怎么能这样随随便便就砍价这么厉害，好歹也要过几天啊~（过几天这价就对不起我自己了）”。于是就作离开状~居然还真不肯往下掉价（好吧，我就先去其他家逛逛）； 第二家一气质美女，起价130元（全新包括各种笔记和大四书籍），也唠叨了半天100元底盘，此刻见书不错本着80元处理的，再做离开状 ，唉~现在的学姐要求太高了，现在卖得那么贵到时候也得几毛钱论斤卖的份都有； 然后到了第三家我就说了，你看你隔壁那家帅哥卖给我80元我还嫌贵了，你们就不能往下降了么？然后学姐就说了：“我们都统一商量好了，一律卖130，你说的是隔壁那家么？（指了指）你看我都卖了好几套了，你看用我的书没错，又有笔记，书还很新，关键是我都有得奖学金，用了我的你也能一样的~（可是我能说之前那几家也是这么向我推销的么？）那我给你看看我的成绩单吧~”本着不甘心~，打算这几天都出来遛弯，看看有什么新的内容，转身呆在一旁思考状。那学姐就不讲究了，很不淡定地去到了隔壁摊那家帅哥店里，作教育状：“你怎么能这么不讲究呢？卖的书旧了点也就算了，转手几次也就算了，你还80元卖出去，有你这样的么！（学姐教育的是啊~）”接着：“我们不是都说好统一卖130元的么！（晕，这么回事啊）”你们这样也不尊重市场规律啊！而且是垄断价格的啊！好吧，我还是过几天再出来瞧瞧了。 回想一下去年，路见一大妈走到一学姐前买蚊帐，问几元，学姐伸出了五个手指头！大妈果断往摊上扔下五毛钱飞快的跑了，留下凌乱的学姐。然后再发生什么有趣的事呢，后载吧。","categories":[{"name":"风雨日记","slug":"风雨日记","permalink":"http://yinzhen.tech/categories/风雨日记/"}],"tags":[]},{"title":"遥想蚊子当年","slug":"遥想蚊子当年","date":"2013-05-18T02:52:39.000Z","updated":"2017-03-15T13:37:08.000Z","comments":true,"path":"2013/05/18/遥想蚊子当年/","link":"","permalink":"http://yinzhen.tech/2013/05/18/遥想蚊子当年/","excerpt":"","text":"最近老家那边貌似温度挺高的，各色昆虫貌似要开个全国协商会议。 回想当初我还在家时，蚊音袅袅，它们用特殊的节奏带领整个夜色进入一个高度兴奋的迪斯科，而且舞姿还真是多种多样： 有的像飞机一样缓慢滑翔，一般不发出声音，不过低空的很容易就被我给坠机了； 有的像个震荡的伤残酒鬼上下地飞，这种姿势给你带来的声音是爬到半山腰然后滚下来的“嘤（上声）~~嘤（下声）的交织循环，这时可以用扇子、书本等风力输出大的物体往它方向打过去，一般可以纠正它的轨迹使它趋于一个平缓的曲线，这时就可以用如来神掌了。不过也有的是心理素质不太好的，就会变得踉跄的，这时它就会找到一个地方歇歇脚，跟上它，看看去了哪里。 有的还像回旋的螺线，真怀疑是个杂技演员，不然就是小脑只剩下一半，发出的声音就和多普勒效应一样，应用的方法同二。 那些年，蚊子是相对健康地喝着饮料的，不像现在我们自己污染了自己，也要去迫害蚊兄； 那些年，我常常在两点睡觉，因为有了蚊兄的陪伴，我可以活络筋骨，不至于半夜无趣还去想些奇怪的数学问题，直接就是生物+物理+化学的综合复习，还有体育锻炼； 那些年，是蚊兄教会了我，一个人的奋斗是很艰苦滴！所以你得有效地解决一些生活问题，像是该不该挂个蚊帐给自己一堵墙保护自己，该不该用”雷达或是菊花“等奇效去伤害蚊兄也伤害自己，还有家里养的植物要选用什么样的； 那些年，蚊兄让我知道了被吻的感觉，我只能说，单位面积造成伤害和欲望有关。当我觉察出感觉时，这丫的饿昏了，一点不懂温柔，所以对待不温柔的人只好和它say good bye了。 其实蚊兄，我见过的有四种： 一种个大无花纹，它是憨厚老实型的； 一种是个小无花纹，它是有点温柔的； 一种是个小带花纹的，不但花心而且它是一点都不温柔的，事后那个小包很久消散，也奇痒； 还有一种是公蚊子，它是绿色的，一直垂涎我家植物好久了。 温度有点高了，风也很歇斯底里地吹着， 尽管安装了窗网，不过貌似阻隔不了蚊子这种激进份子。所以，到晚上，一个人睡的时候还真是苦不堪言，好在大学让我体验了一把”我为人人，人人为我“的光荣传统。 呵呵，写得有点长了，还有什么方法呵护蚊兄的请补充吧。ps：早上一定要吃早餐啊~，饿昏了，神志不清的。","categories":[],"tags":[{"name":"蚊子","slug":"蚊子","permalink":"http://yinzhen.tech/tags/蚊子/"}]},{"title":"远古","slug":"远古","date":"2011-06-26T15:25:51.000Z","updated":"2017-03-14T07:33:32.000Z","comments":true,"path":"2011/06/26/远古/","link":"","permalink":"http://yinzhen.tech/2011/06/26/远古/","excerpt":"","text":"远古的时候， 是否曾经有过我，相约一物 一起到老 一起死去 远古的时候， 是否存在过我，也是否存在过你 相约永世 寻找彼此 相见一次 也许生生世世，世世生生 我们都没再次相遇 转入轮回 你我是否还会记得寻找彼此？","categories":[{"name":"如果可以酿成一首诗","slug":"如果可以酿成一首诗","permalink":"http://yinzhen.tech/categories/如果可以酿成一首诗/"}],"tags":[{"name":"恋","slug":"恋","permalink":"http://yinzhen.tech/tags/恋/"}]},{"title":"蓬莱","slug":"蓬莱","date":"2009-05-28T10:08:04.000Z","updated":"2017-03-14T07:36:41.000Z","comments":true,"path":"2009/05/28/蓬莱/","link":"","permalink":"http://yinzhen.tech/2009/05/28/蓬莱/","excerpt":"","text":"海滩的那一边，一叶扁舟在荡漾星光点烁，风平浪静又一轮月亮翘起了夜的眉梢 海滩的那一边，一阵铃声在飘舞没有了世人的喧嚣，没有了尘世的火燥一阵风吹起了雾帘从此再见了我的学校，班级，分数 像梦一般，不曾有过，又曾相识地—-我的小岛远离，远离……","categories":[{"name":"如果可以酿成一首诗","slug":"如果可以酿成一首诗","permalink":"http://yinzhen.tech/categories/如果可以酿成一首诗/"}],"tags":[{"name":"逃离","slug":"逃离","permalink":"http://yinzhen.tech/tags/逃离/"}]},{"title":"朦胧","slug":"朦胧","date":"2009-01-17T16:20:24.000Z","updated":"2017-03-14T07:38:52.000Z","comments":true,"path":"2009/01/18/朦胧/","link":"","permalink":"http://yinzhen.tech/2009/01/18/朦胧/","excerpt":"","text":"如果是你，它会飞起来， 像在有雾的微风中轻轻地摆动，摇摆 如果是风，他会等待， 在一个优美的山谷里轻轻把你托起，照顾 没有雾的季节，世界却变得如此朦胧 像月光在榆荫下的那潭湖水中翘起轻微的面容 我是你，在月儿的小角上垂下真实的悲伤 还会等待 还会努力 ————-回家","categories":[{"name":"如果可以酿成一首诗","slug":"如果可以酿成一首诗","permalink":"http://yinzhen.tech/categories/如果可以酿成一首诗/"}],"tags":[{"name":"恋","slug":"恋","permalink":"http://yinzhen.tech/tags/恋/"}]}]}